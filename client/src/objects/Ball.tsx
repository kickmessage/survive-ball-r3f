import * as THREE from "three";
import { useSphere } from "@react-three/cannon";
import { useFrame, useThree } from "@react-three/fiber";
import { useBall, useScoreDetection } from "../hooks"
import { useGameStore } from "../state"
import {  useEffect, useRef, useState } from "react";
import { ballPosition } from "../constants"
import { StateType } from "../types"

export default function Ball() {
    const { camera } = useThree();
    const isBallClicked = useGameStore((s: any) => s.isBallClicked);
    const isBallPitched = useGameStore((s: any) => s.isBallPitched);
    const updateIsBallPitched = useGameStore((s: any) => s.updateIsBallPitched);
    const isBatEnabled = useGameStore((s: any) => s.isBatEnabled);
    const updateIsBallClicked = useGameStore((s:any) => s.updateIsBallClicked);
    const state = useGameStore((state:StateType) => state);
    const isPlayStarted = useGameStore((state:StateType) => state.isPlayStarted);
    const args: [x: number, y: number, z: number] = [30,30,30]
    const updateCurrentBallPosition = useGameStore((state:StateType) => state.updateCurrentBallPosition);

    const [ballColor, setBallColor] = useState<"red" | "green">("red");



    const ballPosRef = useRef<[number,number,number]>([ballPosition.x, ballPosition.y, ballPosition.z])
    const { detectHomeRun, detectBunt, detectIsBallInStrikeRange } = useScoreDetection();



    useEffect(()=> {
        if (isBallPitched) {

            api.mass.set(1);
            throwBall(api)
        }



    }, [isBallPitched])







    const [ref, api ] = useSphere<THREE.Mesh>(()=>({args: [args[0]], mass: 0, position:[ballPosition.x,ballPosition.y, ballPosition.z], type: "Dynamic"}  ));
    const { throwBall, hitBall } = useBall(
        {
            isBallClicked: isBallClicked,
            isBallPitched: isBallPitched,
            updateIsBallPitched: updateIsBallPitched,
            isBatEnabled: isBatEnabled,
            updateIsBallClicked: updateIsBallClicked,
            state: state 
        }

    );



    useEffect(() => {
        const unsubscribe = api.position.subscribe((p) => (ballPosRef.current = p));
        return unsubscribe;


    }, [])




    useFrame(({ clock }) => {
        api.rotation.set(Math.sin(clock.getElapsedTime()) , clock.getElapsedTime(), 0);

            updateCurrentBallPosition(ballPosRef.current);

        if (isBallClicked) {
            camera.lookAt(ballPosRef.current[0],ballPosRef.current[1], ballPosRef.current[2])

        }

        if (!isPlayStarted) {
            api.position.set(ballPosition.x, ballPosition.y, ballPosition.z)
            api.velocity.set(0,0,0);
            api.mass.set(0);
            camera.lookAt(0,40,0)


        }

        detectHomeRun(ballPosRef.current);
        detectBunt(ballPosRef.current);
        if (detectIsBallInStrikeRange(ballPosRef.current)) {
            setBallColor("green");

        }
        else {
            setBallColor("red")
        }




    })

    function handleClick(e: any, api: any, ballPosition: any  ) { //@dev really tricky typing (ThreeEvent<MouseEvent> according to typescript linter, which is not generated by @types/three)
        if (detectIsBallInStrikeRange(ballPosRef.current)) {

            hitBall(e,api, ballPosition);
        }




    }



    return(
        <mesh castShadow={true} ref={ref} name='ball' onClick={(e) => (handleClick(e, api, ballPosRef.current))}>
            <sphereGeometry args={args}/>
            <meshMatcapMaterial color={ballColor}/>
        </mesh>
    )
}

